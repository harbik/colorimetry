use std::collections::HashMap;
use std::convert::AsRef;

use colorimetry::illuminant::CieIlluminant;
use colorimetry::observer::Observer;
use colorimetry::observer::OptimalColors;

use strum::IntoEnumIterator;
//use strum::AsRefStr;
use std::fs::File;
use std::io::{BufWriter, Write};

fn generate_rust_file(
    table: &HashMap<(u8, u8), u8>,
    path: &str,
    identifier: String,
) -> std::io::Result<()> {
    // Ensure the directory exists
    let filename = path.split('/').last().unwrap();
    if let Some(dir) = path.rsplit_once('/') {
        std::fs::create_dir_all(dir.0).unwrap();
    }
    // Create the file and write the table
    println!("Generating file: {}", filename);
    if std::path::Path::new(path).exists() {
        println!("File {} already exists, overwriting.", filename);
    }
    // Open the file for writing
    let datafile = File::create(path).unwrap();
    let mut writer = BufWriter::new(datafile);
    writeln!(writer, "// This file is generated by xtask/src/chroma.rs")?;
    writeln!(
        writer,
        "// Do not edit manually, use `cargo xtask gen_tables` to regenerate."
    )?;
    writeln!(writer, "#[allow(clippy::zero_prefixed_literal)]")?;
    writeln!(writer, "pub static {}: [[u8; 72]; 99] = [", identifier)?;
    for l in 1..=99u8 {
        writeln!(writer, "[// L={}", l)?;
        for h in 0..72u8 {
            let c = table.get(&(l, h)).copied().unwrap();
            write!(writer, "{:03}, ", c)?;
            if h % 19 == 18 {
                writeln!(writer)?;
            }
        }
        writeln!(writer, "],")?;
    }
    writeln!(writer, "];")?;
    writer.flush().unwrap();
    println!("Wrote {}", filename);
    Ok(())
}

pub fn gen_files() {
    for ref_white in [CieIlluminant::D65, CieIlluminant::D50] {
        for obs in Observer::iter() {
            let cie_ill: &str = ref_white.as_ref();
            println!(
                "CIELCH_GAMUT_{}_{}",
                obs.as_ref().to_uppercase(),
                cie_ill.to_uppercase()
            );
            let identifier = format!(
                "CIELCH_GAMUT_{}_{}",
                obs.as_ref().to_uppercase(),
                cie_ill.to_uppercase()
            );
            let filename = format!("{}.rs", identifier.to_lowercase());
            let path = format!("{}/{}", "./src/lab/gamut", filename);
            let opt_colors = obs.optimal_colors(ref_white);

            let cielch = opt_colors.cielab_max_chromas();
            assert_eq!(cielch.len(), OptimalColors::LAB_MAX_CHROME_LEN);
            generate_rust_file(&cielch, &path, identifier).unwrap();
        }
    }
}

#[test]
fn test_gen_tables() {
    gen_files();
}
