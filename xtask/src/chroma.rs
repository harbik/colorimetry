use std::collections::HashMap;
use std::convert::AsRef;

use colorimetry::illuminant::CieIlluminant;
use colorimetry::observer::Observer;
use colorimetry::observer::OptimalColors;

use serde::Serialize;
use strum::IntoEnumIterator;
//use strum::AsRefStr;
use handlebars::Handlebars;
use std::fs::File;
use std::io::Write;

static SRC: &str = "
    // This file is generated by xtask/src/chroma.rs
    // Do not edit manually, use `cargo xtask gen_tables` to regenerate.

    use crate::{illuminant, observer};
    use super::CieLChGamutData;
    use nalgebra::{ArrayStorage, SMatrix};

    pub(super) static {{identifier}}: CieLChGamutData = CieLChGamutData::new(
        illuminant::CieIlluminant::{{cie_illuminant}},
        observer::Observer::{{observer}},
        SMatrix::from_array_storage(ArrayStorage({{data}}))
    );
";
// Not using `#[derive(Serialize)]` here because we are using Handlebars for templating,
// which requires a custom serialization format.
#[derive(Debug, Clone, Serialize)]
struct Data {
    identifier: String,
    cie_illuminant: String,
    observer: String,
    data: Vec<Vec<u8>>,
}

impl Data {
    fn new(
        identifier: String,
        cie_illuminant: String,
        observer: String,
        data: Vec<Vec<u8>>,
    ) -> Self {
        Data {
            identifier,
            cie_illuminant,
            observer,
            data,
        }
    }

    fn save_to_file(&self, path: &str) -> Result<(), Box<dyn std::error::Error>> {
        let mut hb = Handlebars::new();
        // Register the template
        hb.register_template_string("src_template", SRC)
            .expect("Failed to register template");
        // Prepare the data for the template
        let rendered = hb.render("src_template", self)?;

        // Ensure the directory exists
        if let Some(dir) = path.rsplit_once('/') {
            std::fs::create_dir_all(dir.0).unwrap();
        }

        // Create the file and write the rendered content
        println!("Generating file: {}", path);
        let mut file = File::create(path)?;
        write!(file, "{}", rendered)?;
        Ok(())
    }
}

pub fn data_table(map: &HashMap<(u8, u8), u8>) -> Vec<Vec<u8>> {
    // SMatrix is row-major, so we need to create a 2D vector
    // with 72 columns (hue bins) and 99 rows (lightness bins).
    // lightness is the fastest changing index (row-major order).
    let mut table = Vec::new();
    for h in 0..72u8 {
        let mut lightness_vec = Vec::new();
        for l in 1..=99u8 {
            lightness_vec.push(map.get(&(l, h)).copied().unwrap());
        }
        table.push(lightness_vec);
    }
    table
}

pub fn gen_files() {
    for ref_white in [CieIlluminant::D65, CieIlluminant::D50] {
        for obs in Observer::iter() {
            let cie_ill: &str = ref_white.as_ref();
            println!(
                "CIELCH_GAMUT_{}_{}",
                obs.as_ref().to_uppercase(),
                cie_ill.to_uppercase()
            );
            let identifier = format!(
                "CIELCH_GAMUT_{}_{}",
                obs.as_ref().to_uppercase(),
                cie_ill.to_uppercase()
            );
            let filename = format!("{}.rs", identifier.to_lowercase());
            let path = format!("{}/{}", "./src/lab/gamut", filename);
            let opt_colors = obs.optimal_colors(ref_white);
            let cielch = opt_colors.cielab_max_chromas();
            assert_eq!(cielch.len(), OptimalColors::LAB_MAX_CHROME_LEN);

            let table = data_table(&cielch);
            let ouptut_data = Data::new(
                identifier.clone(),
                cie_ill.to_string(),
                obs.as_ref().to_string(),
                table,
            );
            ouptut_data
                .save_to_file(path.as_str())
                .expect("Failed to save data to file");
        }
    }
}

#[test]
fn test_gen_tables() {
    gen_files();
}
